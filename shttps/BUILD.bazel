load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")

package(default_visibility = ["//visibility:public"])

cc_binary(
    name = "main",
    srcs = ["Shttp.cpp"],
    deps = [
        ":error",
        ":connection_server",
        ":lua_server",
        "//ext/jwt",
        "//ext/sole",
        "//ext/jansson",
        "//ext/openssl",
        "@lua//:lua",
    ],
)

cc_library(
    name = "chunk_reader",
    srcs = ["ChunkReader.cpp"],
    hdrs = ["ChunkReader.h"],
    copts = [
        "-std=c++17",
    ],
    deps = [
        ":error",
    ],
)

# FIXME: has circular dependency
cc_library(
    name = "connection_server",
    srcs = [
        "Connection.cpp",
        "Server.cpp",
    ],
    hdrs = [
        "Connection.h",
        "Server.h",
    ],
    deps = [
        ":chunk_reader",
        ":error",
        ":global",
        ":lua_server",
        ":make_unique",
        ":sock_stream",
    ],
)

cc_library(
    name = "error",
    srcs = ["Error.cpp"],
    hdrs = ["Error.h"],
    deps = [],
)

cc_library(
    name = "global",
    srcs = ["Global.h"],
    deps = [],
)

cc_library(
    name = "hash",
    srcs = ["Hash.cpp"],
    hdrs = ["Hash.h"],
    deps = [
        ":error",
        ":make_unique",
        "//ext/openssl",
    ],
)

cc_library(
    name = "lua_server",
    srcs = ["LuaServer.cpp"],
    hdrs = ["LuaServer.h"],
    deps = [
        ":global",
        ":parsing",
        "//ext/sole",
        "@lua//:lua",
    ],
)

cc_library(
    name = "lua_sqlite",
    srcs = ["LuaSqlite.cpp"],
    hdrs = ["LuaSqlite.h"],
    deps = [
        ":error",
        ":connection_server",
        ":lua_server",
        "@lua//:lua",
    ],
)

cc_library(
    name = "make_unique",
    srcs = ["makeunique.h"],
    deps = [],
)

cc_library(
    name = "parsing",
    srcs = ["Parsing.cpp"],
    hdrs = ["Parsing.h"],
    deps = [
        ":error",
        "//ext/file",
    ],
)



cc_library(
    name = "socket_control",
    srcs = ["SocketControl.cpp"],
    hdrs = ["SocketControl.h"],
    copts = ["-DSHTTPS_ENABLE_SSL"],
    deps = [
        ":error",
        ":thread_control",
        "//ext/openssl",
    ],
)

cc_library(
    name = "sock_stream",
    srcs = ["SockStream.cpp"],
    hdrs = ["SockStream.h"],
    deps = [],
)

cc_library(
    name = "thread_control",
    srcs = ["ThreadControl.cpp"],
    hdrs = ["ThreadControl.h"],
    deps = [],
)
