<lua>


if server.cookies['sipi'] then
    intoken = server.cookies['sipi']
    jwt = server.decode_jwt(intoken)
    for k,v in pairs(jwt) do
       print(k, " : ", v)
    end

end

auth = server.requireAuth()
    for k,v in pairs(auth) do
       print("Auth: ", k, " : ", v)
    end

if auth.status == 'BASIC' then
    username = auth.username
    password = auth.password
elseif auth.status == 'NOAUTH' then
    server.setBuffer()
    server.sendStatus(401);
    server.sendHeader('WWW-Authenticate', 'Basic realm="SIPI"')
    return -1
else
    server.sendStatus(401)
    server.sendHeader('WWW-Authenticate', 'Basic realm="SIPI"')
end

tokendata = {
    iss = "sipi.unibas.ch",
    aud = "knora.org",
    user = username
}
token = server.generate_jwt(tokendata)

server.sendCookie('sipi', token, {path = '/', expires = 3600})


</lua>
<html>
<head>
  <meta charset="UTF-8">
  <title>Embedded lua test</title>
</head>
<body>
<h1>Embedded lua test</h1>
<hr/>

<lua>



function print_table(table)
    server.print("<table border=\"1\">")
    server.print("<tr><th>Field</th><th>Value</th></tr>")

    for k,v in pairs(table) do
        server.print("<tr><td valign=\"top\">", k, "</td><td>")
        if (type(v) == "table") then
            print_table(v)
        else
            server.print(v)
        end
        server.print("</td></tr>")
    end

    server.print("</table>")
end

server.print("Client-ip: ", server.client_ip, "<br/>")
server.print("Client-port: ", server.client_port, "<br/>")
if server.secure then
    server.print("Secure: TRUE<br/>")
else
    server.print("Secure: FALSE<br/>")
end
server.print("Host: ", server.host, "<br/><hr/>")
server.print("Username: ", username, "<br/>")
server.print("Password: ", password, "<br/><hr/>")


-- result = server.http("GET", "http://www.salsah.org/api/resources/1", 5000)
result = server.http("GET", "https://services.groupkt.com/country/get/all", {Cookie = 'gagaga'}, 5000)


if (result.success) then
    server.print("Duration: ", result.duration, " ms<br/>")
    server.print("Status: ", result.status_code, "<br/><hr/>")

    server.print("<h2>Header variables</h2>")
    print_table(server.header)


    answer = server.json_to_table(result.body)
    server.print("<h2>Result</h2>")
    print_table(answer)
else
   server.print("ERROR: ", result.errmsg)
end

-- answer = server.json_to_table("waseliwas isch denn das")
</lua>

</body>
</html>
